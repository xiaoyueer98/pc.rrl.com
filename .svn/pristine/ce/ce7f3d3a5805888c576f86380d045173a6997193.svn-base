<?php

function sendMail($to, $title, $content) {

    Vendor('PHPMailer.PHPMailerAutoload');
    $mail = new PHPMailer(); //实例化
    $mail->IsSMTP(); // 启用SMTP
    $mail->Host = C('MAIL_HOST'); //smtp服务器的名称（这里以QQ邮箱为例）
    $mail->SMTPAuth = C('MAIL_SMTPAUTH'); //启用smtp认证
    $mail->Username = C('MAIL_USERNAME'); //你的邮箱名
    $mail->Password = C('MAIL_PASSWORD'); //邮箱密码
    $mail->From = C('MAIL_FROM'); //发件人地址（也就是你的邮箱地址）
    $mail->FromName = C('MAIL_FROMNAME'); //发件人姓名
    $mail->AddAddress($to, "尊敬的客户");
    $mail->WordWrap = 50; //设置每行字符长度
    $mail->IsHTML(C('MAIL_ISHTML')); // 是否HTML格式邮件
    $mail->CharSet = C('MAIL_CHARSET'); //设置邮件编码
    $mail->Subject = $title; //邮件主题
    $mail->Body = $content; //邮件内容
    $mail->AltBody = "这是一个纯文本的身体在非营利的HTML电子邮件客户端"; //邮件正文不支持HTML的备用显示
    return($mail->Send());
}

function getpage(&$m, $where, $pagesize = 10) {
    $m1 = clone $m; //浅复制一个模型
    $count = $m->where($where)->count(); //连惯操作后会对join等操作进行重置
    $m = $m1; //为保持在为定的连惯操作，浅复制一个模型
    $p = new Think\Page($count, $pagesize);
    $p->lastSuffix = false;
    $p->setConfig('header', "<li class='rows'>共<b>%TOTAL_ROW%</b>条记录  每页<b>" . $pagesize . "</b>条  第<b>%NOW_PAGE%</b>页/共<b>%TOTAL_PAGE%</b>页</li>");
    $p->setConfig('prev', '上一页');
    $p->setConfig('next', '下一页');
    $p->setConfig('last', '末页');
    $p->setConfig('first', '首页');
    $p->setConfig('theme', '%FIRST% %UP_PAGE% %LINK_PAGE% %DOWN_PAGE% %END% %HEADER%');

    $p->parameter = I('get.');

    $m->limit($p->firstRow, $p->listRows);
    return $p;
}

function encrypt($data, $key) {
    $prep_code = serialize($data);
    $block = mcrypt_get_block_size('des', 'ecb');
    if (($pad = $block - (strlen($prep_code) % $block)) < $block) {
        $prep_code .= str_repeat(chr($pad), $pad);
    }
    $encrypt = mcrypt_encrypt(MCRYPT_DES, $key, $prep_code, MCRYPT_MODE_ECB);
    return base64_encode($encrypt);
}

function decrypt($str, $key) {
    $str = base64_decode($str);
    $str = mcrypt_decrypt(MCRYPT_DES, $key, $str, MCRYPT_MODE_ECB);
    $block = mcrypt_get_block_size('des', 'ecb');
    $pad = ord($str[($len = strlen($str)) - 1]);
    if ($pad && $pad < $block && preg_match('/' . chr($pad) . '{' . $pad . '}$/', $str)) {
        $str = substr($str, 0, strlen($str) - $pad);
    }
    return unserialize($str);
}

function getCascData($datagroup, $datavalue, $tip) {

    if ($datavalue == "") {
        return $tip;
    }
    $objCascadedata = M("cascadedata");
    $arCascadedataInfo = $objCascadedata->where("datagroup='{$datagroup}' and datavalue=" . $datavalue)->find();
    if (empty($arCascadedataInfo) || empty($arCascadedataInfo['dataname'])) {
        return $tip;
    }
    return $arCascadedataInfo['dataname'];
}

function getCascList($value, $tip) {

    if ($value == "") {
        return $tip;
    }
    $objCasclist = M("casclist");
    $arCasclistInfo = $objCasclist->where("id='{$value}'")->find();
    if (empty($arCasclistInfo) || empty($arCasclistInfo['cascname'])) {
        return $tip;
    }
    return $arCasclistInfo['cascname'];
}

/*
 * function:显示某一个时间相当于当前时间在多少秒前，多少分钟前，多少小时前 
 * timeInt:unix time时间戳 
 * format:时间显示格式 
 */

function timeFormat($timeInt, $format = 'Y-m-d H:i:s') {

    if (empty($timeInt) || !is_numeric($timeInt) || !$timeInt) {
        return '';
    }

    $d = time() - $timeInt;
    if ($d < 0) {
        return '';
    } else {
        if ($d < 60) {
            return $d . '秒前';
        } else {
            if ($d < 3600) {
                return floor($d / 60) . '分钟前';
            } else {
                if ($d < 86400) {
                    return floor($d / 3600) . '小时前';
                } else {
                    if ($d < 259200) {//3天内 
                        return floor($d / 86400) . '天前';
                    } else {
                        return date($format, $timeInt);
                    }
                }
            }
        }
    }
}

function sendMessage($mobile, $content, $linkid = 0, $tag = "code", $comment = "验证码") {
    $blackList = array("13429616772", "15391660000", "18898762014", "15282025307", "18308359754", "17093432751", "15021092824", "15752934500", "15272675888",
        "18307835916", "13705229609", "15555571993", "13373916567", "13316097070", "18917196084", "13265186597", "18707991166", "13143179652", "18767993049", "15050467232",
        "13070049756", "15759721798", "13799663444", "18602725510", "13886692636", "13697293588", "13637538515", "15359555317", "15634999222", "18171901222", "13014063026", "15703426792", "15023824626");
    if (in_array($mobile, $blackList)) {
        return array("code" => 500, "msg" => "黑名单");
    }
    $codeMsg = array("100" => "全部成功", "101" => "参数错误", "102" => "号码错误", "103" => "当日余量不足",
        "104" => "请求超时", "105" => "用户余量不足", "106" => "非法用户", "107" => "提交号码超限", "111" => "签名不合法", "120" => "内容长度超长，请不要超过500个字", "121" => "内容中有屏蔽词");
//    if (is_array($mobile)) {
//        foreach ($mobile as $key => $val) {
//            $rule = "/^((13[0-9])|147|(15[0-35-9])|180|182|(18[5-9]))[0-9]{8}$/A";
//            preg_match($rule, $mobile, $result);
//            if (!$result) {
//                unset($mobile[$key]);
//            }
//        }
//        $mobile = explode(",", $mobile);
//    }

    $data['username'] = "zpkj";
    $data['pwd'] = md5("S2pKDu7q");
    $data['extnum'] = "";
    $data['p'] = $mobile;
    $data['isUrlEncode'] = "no";
    $data['charSetStr'] = "utf8";
    $data['msg'] = $content;

    $mobileCountbyIP = getMobileCountByIP($_SERVER["REMOTE_ADDR"]);
    if ($mobileCountbyIP > 10) {
        $code = 500;
        $logInfo['status'] = 3;
        return array("code" => $code, "msg" => "单日平台发送条数超过5条");
        $logInfo['ip'] = $_SERVER["REMOTE_ADDR"];
        $logInfo['link_id'] = $linkid;
        $logInfo['tag'] = $tag;
        $logInfo['comment'] = $comment;
        $logInfo['mobile'] = $mobile;
        $logInfo['content'] = $content;
        $logInfo['msg'] = "IP受限";
        $logInfo['created_at'] = $logInfo['updated_at'] = time();
        M("sms_log")->add($logInfo);
        return array("code" => $code, "msg" => "单日平台发送条数超过5条");
    }
    $mobileCount = getMobileCount($mobile);
    if ($mobileCount > 5) {
        return array("code" => $code, "msg" => "单日平台发送条数超过5条");
        $logInfo['ip'] = $_SERVER["REMOTE_ADDR"];
        $code = 500;
        $logInfo['status'] = 3;
        $logInfo['link_id'] = $linkid;
        $logInfo['tag'] = $tag;
        $logInfo['comment'] = $comment;
        $logInfo['mobile'] = $mobile;
        $logInfo['content'] = $content;
        $logInfo['msg'] = "单日平台发送条数超过5条";
        $logInfo['created_at'] = $logInfo['updated_at'] = time();
        M("sms_log")->add($logInfo);
    }
    /* 测试不发短信直接成功  */
    $jasonCallback = Post($data, "http://api.app2e.com/smsBigSend.api.php");
    $arCallback = json_decode($jasonCallback, true);

    // $arCallback = array("status"=>100);
    $logInfo = array();
    if ($arCallback['status'] == 10) {
        $logInfo['status'] = 2;
        $code = 200;
    } else {
        $code = 500;
        $logInfo['status'] = 3;
    }

    $logInfo['ip'] = $_SERVER["REMOTE_ADDR"];
    $logInfo['link_id'] = $linkid;
    $logInfo['tag'] = $tag;
    $logInfo['comment'] = $comment;
    $logInfo['mobile'] = $mobile;
    $logInfo['content'] = $content;
    $logInfo['msg'] = $codeMsg[$arCallback['status']];
    $logInfo['created_at'] = $logInfo['updated_at'] = time();
    M("sms_log")->add($logInfo);
    return array("code" => $code, "msg" => $codeMsg[$arCallback['status']]);
}

//老的发送短信接口
function oldSendMsg($mobile, $content, $linkid = 0, $tag = "code", $comment = "验证码") {
    $blackList = array("13429616772", "15391660000", "18898762014", "15282025307", "18308359754", "17093432751", "15021092824", "15752934500", "15272675888",
        "18307835916", "13705229609", "15555571993", "13373916567", "13316097070", "18917196084", "13265186597", "18707991166", "13143179652", "18767993049", "15050467232",
        "13070049756", "15759721798", "13799663444", "18602725510", "13886692636", "13697293588", "13637538515", "15359555317", "15634999222", "18171901222", "13014063026", "15703426792", "15023824626");
    if (in_array($mobile, $blackList)) {
        return false;
    }
    $mobileCountbyIP = getMobileCountByIP($_SERVER["REMOTE_ADDR"]);
    if ($mobileCountbyIP > 10) {

        $logInfo['ip'] = $_SERVER["REMOTE_ADDR"];
        $code = 500;
        return array("code" => $code, "msg" => "IP受限");
        $logInfo['status'] = 3;
        $logInfo['link_id'] = $linkid;
        $logInfo['tag'] = $tag;
        $logInfo['comment'] = $comment;
        $logInfo['mobile'] = $mobile;
        $logInfo['content'] = $content;
        $logInfo['msg'] = "IP受限";
        $logInfo['created_at'] = $logInfo['updated_at'] = time();
        M("sms_log")->add($logInfo);
        return array("code" => $code, "msg" => $logInfo['msg']);
    }
    $mobileCount = getMobileCount($mobile);
    if ($mobileCount > 5) {
        return array("code" => $code, "msg" => "单日平台发送条数超过5条");
        $logInfo['ip'] = $_SERVER["REMOTE_ADDR"];
        $code = 500;
        $logInfo['status'] = 3;
        $logInfo['link_id'] = $linkid;
        $logInfo['tag'] = $tag;
        $logInfo['comment'] = $comment;
        $logInfo['mobile'] = $mobile;
        $logInfo['content'] = $content;
        $logInfo['msg'] = "单日平台发送条数超过5条";
        $logInfo['created_at'] = $logInfo['updated_at'] = time();
        M("sms_log")->add($logInfo);
        return array("code" => $code, "msg" => $logInfo['msg']);
    }
    $target = "http://106.ihuyi.cn/webservice/sms.php?method=Submit";
    $post_data = "account=cf_zpkj&password=renrenlie231&mobile=" . $mobile . "&content=" . rawurlencode($content);

    $gets = xml_to_array(Post($post_data, $target));
    if ($gets['SubmitResult']['code'] == 2) {
        $code = 200;
        $status = 2;
    } else {
        $status = 3;
        $code = 500;
//        return $gets;
    }
    $sql = "INSERT INTO `stj_sms_log` (link_id,tag,comment,mobile,content,msg,created_at,updated_at,status,ip) values ('$linkid','$tag','$comment','$mobile','$content','" . $gets['SubmitResult']['msg'] . "','" . time() . "','" . time() . "','$status','$_SERVER[REMOTE_ADDR]')";
    M("sms_log")->query($sql);
    return array("code" => $code, "msg" => $gets['SubmitResult']['msg']);
}

//新短信发送接口
function sendMessageNew($mobile, $content, $linkid = 0, $tag = "code", $comment = "验证码") {
    $blackList = array("13429616772", "15391660000", "18898762014", "15282025307", "18308359754", "17093432751", "15021092824", "15752934500", "15272675888",
        "18307835916", "13705229609", "15555571993", "13373916567", "13316097070", "18917196084", "13265186597", "18707991166", "13143179652", "18767993049", "15050467232",
        "13070049756", "15759721798", "13799663444", "18602725510", "13886692636", "13697293588", "13637538515", "15359555317", "15634999222", "18171901222", "13014063026", "15703426792", "15023824626");
    if (in_array($mobile, $blackList)) {
        return array("code" => 500, "msg" => "黑名单");
    }
    $mobileCountbyIP = getMobileCountByIP($_SERVER["REMOTE_ADDR"]);
    if ($mobileCountbyIP > 10) {
        return array("code" => $code, "msg" => "ip受限");
        $logInfo['ip'] = $_SERVER["REMOTE_ADDR"];
        $code = 500;
        $logInfo['status'] = 3;
        $logInfo['link_id'] = $linkid;
        $logInfo['tag'] = $tag;
        $logInfo['comment'] = $comment;
        $logInfo['mobile'] = $mobile;
        $logInfo['content'] = $content;
        $logInfo['msg'] = "IP受限";
        $logInfo['created_at'] = $logInfo['updated_at'] = time();
        M("sms_log")->add($logInfo);
        return array("code" => $code, "msg" => "ip受限");
    }
    $mobileCount = getMobileCount($mobile);
    if ($mobileCount > 5) {
        return array("code" => $code, "msg" => "单日平台发送条数超过5条");
        $logInfo['ip'] = $_SERVER["REMOTE_ADDR"];
        $code = 500;
        $logInfo['status'] = 3;
        $logInfo['link_id'] = $linkid;
        $logInfo['tag'] = $tag;
        $logInfo['comment'] = $comment;
        $logInfo['mobile'] = $mobile;
        $logInfo['content'] = $content;
        $logInfo['msg'] = "单日平台发送条数超过5条";
        $logInfo['created_at'] = $logInfo['updated_at'] = time();
        M("sms_log")->add($logInfo);
        return array("code" => $code, "msg" => "单日平台发送条数超过5条");
    }
    $codeMsg = array("0" => "全部成功", "-1000" => "用户账号不存在", "-1004" => "用户账号已注销", "-1005" => "用户账号已禁用",
        "-1006" => "账户余额不足（配置条数0）", "-1007" => "一次批量发送消息条数太多（限制200条）", "-1008" => "提交结构不合法，无效的发送方式", "-1009" => "消息内容为空", "-1010" => "发送目的地手机号码无效", "-1011" => "余额不足", "-1012" => "黑名单",
        "-1013" => "内容包含过滤字", "-1014" => "内容包含过滤字", "-1015" => "签名不通过", "-1016" => "模板审核不通过", "-1017" => "单用户接收日上限", "-1018" => "找不到对应的通道（没有配置通道），请不要超过500个字", "-1099" => "系统异常",
        "9992" => "消息有效时间已过期", "9992" => "消息已被删除", "9992" => "消息无法递交(用户未开户)", "9992" => "消息处于中间状态");


//    if (is_array($mobile)) {
//        foreach ($mobile as $key => $val) {
//            $rule = "/^((13[0-9])|147|(15[0-35-9])|180|182|(18[5-9]))[0-9]{8}$/A";
//            preg_match($rule, $mobile, $result);
//            if (!$result) {
//                unset($mobile[$key]);
//            }
//        }
//        $mobile = explode(",", $mobile);
//    } else {
//        $rule = "/^((13[0-9])|147|(15[0-35-9])|180|182|(18[5-9]))[0-9]{8}$/A";
//        preg_match($rule, $mobile, $result);
//        if (!$result) {
//            return array("code" => 500, "msg" => "手机号码输入有误");
//        }
//    }
    $GetUrl = "http://qxt.1166.com.cn/qxtsys/recv_center?CpName=0106rrlHY&CpPassword=renrenlie0706&DesMobile=" . $mobile . "&Content=" . rawurlencode("【人人猎】" . $content);
    /*
      $data['CpName'] = "0106rrlHY";
      $data['CpPassword'] = "renrenlie0706";
      $data['DesMobile'] = $mobile;
      $data['Content'] = "【人人猎】" . $content;
      // $data['ExtCode']         = "";

      $jasonCallback = Post($data, "http://qxt.1166.com.cn/qxtsys/recv_center");
     * 
     */
    $jasonCallback = Get($GetUrl);
    $arCallback = json_decode($jasonCallback, true);

    $logInfo = array();
    if ($arCallback['code'] == 0) {
        $logInfo['status'] = 2;
        $code = 200;
    } else {
        $code = 500;
        $logInfo['status'] = 3;
    }

    $sql = "INSERT INTO `stj_sms_log` (link_id,tag,comment,mobile,content,msg,created_at,updated_at,status,ip) values ('$linkid','$tag','$comment','$mobile','$content','" . $codeMsg[$arCallback[code]] . "','" . time() . "','" . time() . "','$logInfo[status]','$_SERVER[REMOTE_ADDR]')";
    M("sms_log")->query($sql);

    return array("code" => $code, "msg" => $codeMsg[$arCallback['code']]);
}

function xml_to_array($xml) {
    $reg = "/<(\w+)[^>]*>([\\x00-\\xFF]*)<\\/\\1>/";
    if (preg_match_all($reg, $xml, $matches)) {
        $count = count($matches[0]);
        for ($i = 0; $i < $count; $i++) {
            $subxml = $matches[2][$i];
            $key = $matches[1][$i];
            if (preg_match($reg, $subxml)) {
                $arr[$key] = xml_to_array($subxml);
            } else {
                $arr[$key] = $subxml;
            }
        }
    }
    return $arr;
}

function Post($curlPost, $url) {
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
// post数据
    curl_setopt($ch, CURLOPT_POST, 1);
// post的变量
    curl_setopt($ch, CURLOPT_POSTFIELDS, $curlPost);
    $output = curl_exec($ch);
    curl_close($ch);
    return $output;
}

function Get($url, $charset = 'utf-8') {
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_HEADER, 0);
    curl_setopt($ch, CURLOPT_TIMEOUT, 10);
    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_BINARYTRANSFER, true);
    $returnValue = curl_exec($ch);
    curl_close($ch);
    if ($charset != 'utf-8') {
        $returnValue = iconv($charset, 'utf-8', $returnValue);
    }
    return $returnValue;
}

function getCode($num = 6) {
    $randStr = str_shuffle('1234567890');
    $rand = substr($randStr, 0, 6);
    return $rand;
}

//获取data 值
function getDataName($key, $value) {

    $sql = "SELECT * FROM stj_cascadedata WHERE datagroup='$key' AND datavalue='$value'";
    $result = M("cascadedata")->query($sql);
    return $result[0]['dataname'];
}

function getMobileCount($mobile, $time = 1) {
    if ($time == 1) {
        $time = strtotime(date("Y-m-d"));
    }
    $sql = "select count(*) AS total from stj_sms_log where mobile='$mobile' and created_at>'$time'";
    $result = M("sms_log")->query($sql);
    return $result[0]['total'];
}

function getMobileCountByIP($ip) {
    $time = strtotime(date("Y-m-d"));
    $sql = "select count(*) AS total from stj_sms_log where ip='$ip' and created_at>'$time'";
    $result = M("sms_log")->query($sql);
    return $result[0]['total'];
}

//获取data 数组
function getData($key) {
    $sql = "SELECT * FROM stj_cascadedata WHERE datagroup='$key'";
    $result = M("cascadedata")->query($sql);
    return $result;
}

//获取csc 数组
function getCscData($id) {
    $sql = "SELECT * FROM stj_casclist WHERE id='$id'";
    $result = M("casclist")->query($sql);

    return $result[0]['cascname'];
}


/*
 * function 添加会员操作日志
 * $uid         用户ID
 * $username    用户名称
 * $logTitle    日志标题
 * $logContent  日志内容
 * $type        1推荐人消息，2企业消息 
 */

function addNoticeLog($uid, $username, $bt_id, $job_id, $logTitle, $logContent, $category = 1, $type = 1) {
    $sql = "INSERT INTO `stj_notice_log` (id,uid,username,type,category,bt_id,j_id,title,content,created_at,updated_at,status) values (null,'$uid','$username','$type',$category,$bt_id,$job_id,'$logTitle','" . $logContent . "','" . time() . "','" . time() . "',1)";
    return M("notice_log")->query($sql);
}

//获取消息系统信息（推荐人流程）
function getTNoticeInfo($type, $bt_name, $cpname = "", $jobname = "", $because = "", $facestatus = "", $statusCause = "") {

    //推荐人流程
    $arNoticeInfo = array(
        "0" => array("增加候选人", "您成功上传了" . $bt_name . "候选人的简历。"),
        "1" => array("推荐候选人", "您成功将" . $bt_name . "候选人推荐给" . $cpname . $jobname . "职位。"), //推荐人推荐候选人（推荐方式1）
        "2" => array("后台匹配推荐", "您的候选人" . $bt_name . "已被人人猎匹配系统推荐给了" . $cpname . $jobname . "职位。"), //二次匹配（推荐方式2）
        "3" => array("后台匹配推荐", "您的候选人" . $bt_name . "已被人人猎匹配系统推荐给了" . $cpname . $jobname . "职位。"), //运营直推（简历详情中） （推荐方式3）
        "4" => array("后台审核通过", "您推荐给" . $cpname . $jobname . "职位的" . $bt_name . "候选人简历，通过了人人猎系统审核。"), //推荐记录被运营通过（推荐人）
        "5" => array("后台审核被驳回", "您推荐给" . $cpname . $jobname . "职位" . "的" . $bt_name . "候选人简历，未通过人人猎系统审核，原因是" . $because . "。"), //推荐记录被运营驳回（推荐人）
        "6" => array("企业查看简历", "您推荐给" . $cpname . $jobname . "职位的" . $bt_name . "候选人简历，已被该企业查阅。"),
        "7" => array("企业修改面试状态", "您推荐给" . $cpname . $jobname . "职位的" . $bt_name . "候选人简历状态已被更新为" . $facestatus . "状态，请密切关注。"),
        "9" => array("企业修改面试状态", "您推荐给" . $cpname . $jobname . "职位的" . $bt_name . "候选人简历状态已被更新为" . $facestatus . "状态，原因是" . $statusCause . "。"), //面试不同过        
        "8" => array("后台操作已入职", "您推荐给" . $cpname . $jobname . "职位的" . $bt_name . "候选人已入职"),
    );
    return $arNoticeInfo[$type];
}

//获取消息系统信息（企业流程）
function getCNoticeInfo($type, $jobname, $bt_name = "", $facestatus = "", $statusCause = "") {

    //企业流程
    $arNoticeInfo = array(
        "0" => array("企业发布职位", "您成功发布了" . $jobname . "职位。"),
        "1" => array("后台审核通过职位", "您发布的" . $jobname . "职位，已通过人人猎系统审核。"),
        "2" => array("后台审核驳回职位", "您发布的" . $jobname . "职位，未通过人人猎系统审核，请联系人人猎客服电话010-57188076。"),
        "3" => array("后台审核通过推荐记录", "您发布的" . $jobname . "职位，有新的候选人简历，请及时查阅。"), //推荐记录被运营通过（企业） （成功推荐方式1）
        "4" => array("后台匹配推荐", "您发布的" . $jobname . "职位，有新的候选人简历，请及时查阅。"), //二次匹配 （成功推荐方式2）
        "5" => array("后台匹配推荐", "您发布的" . $jobname . "职位，有新的候选人简历，请及时查阅。"), //运营直推（简历详情中） （成功推荐方式3）
        "6" => array("查看简历", "您查阅了" . $jobname . "职位的" . $bt_name . "候选人简历。"),
        "7" => array("修改面试状态", "您成功将" . $jobname . "职位的" . $bt_name . "候选人简历更新为" . $facestatus . "状态。"),
        "9" => array("修改面试状态", "您成功将" . $jobname . "职位的" . $bt_name . "候选人简历更新为" . $facestatus . "状态，原因是" . $statusCause . "。"),
        "8" => array("后台操作已入职", "您发布的" . $jobname . "职位，候选人" . $bt_name . "已入职，且付款。"),
    );
    return $arNoticeInfo[$type];
}

function cut_str($string, $sublen, $start = 0, $code = 'UTF-8') {
    if ($code == 'UTF-8') {
        $pa = "/[\x01-\x7f]|[\xc2-\xdf][\x80-\xbf]|\xe0[\xa0-\xbf][\x80-\xbf]|[\xe1-\xef][\x80-\xbf][\x80-\xbf]|\xf0[\x90-\xbf][\x80-\xbf][\x80-\xbf]|[\xf1-\xf7][\x80-\xbf][\x80-\xbf][\x80-\xbf]/";
        preg_match_all($pa, $string, $t_string);

        if (count($t_string[0]) - $start > $sublen)
            return join('', array_slice($t_string[0], $start, $sublen));
        return join('', array_slice($t_string[0], $start, $sublen));
    }
    else {
        $start = $start * 2;
        $sublen = $sublen * 2;
        $strlen = strlen($string);
        $tmpstr = '';

        for ($i = 0; $i < $strlen; $i++) {
            if ($i >= $start && $i < ($start + $sublen)) {
                if (ord(substr($string, $i, 1)) > 129) {
                    $tmpstr.= substr($string, $i, 2);
                } else {
                    $tmpstr.= substr($string, $i, 1);
                }
            }
            if (ord(substr($string, $i, 1)) > 129)
                $i++;
        }
        //if(strlen($tmpstr)< $strlen ) $tmpstr.= "...";
        return $tmpstr;
    }
}

/*
 * 微信获取访问当前页面的是时间
 */

function get_login_time() {

    //如果是登陆更新用户的登陆时间
    if (!empty($_COOKIE['userinfo'])) {
//               var_dump(date("Y-m-d H:i:s",$_COOKIE["record_time"]));

        if (!$_COOKIE["record_time"]) {
            //查看今天是否已经更新过这个时间
            $userinfo = unserialize($_COOKIE['userinfo']);
            $arMember = M("member")->where("id=" . $userinfo['userid'])->find();
            if (time() - $arMember['logintime'] >= 3600 * 24) {
                //修改登陆信息
                $arUserLogin = array("logintime" => time(), "loginip" => $_SERVER["REMOTE_ADDR"]);
                M("member")->where("id=" . $userinfo['userid'])->save($arUserLogin);

                setcookie("record_time", time(), time() + 3600 * 24, "/");
            } else {
                setcookie("record_time", time(), $arMember['logintime'] + 3600 * 24, "/");
            }
        }
    }
//               setcookie("record_time","",time()-1,"/");
}

//生成keyid
function getMillisecond() {
    list($t1, $t2) = explode(' ', microtime());
    return (float) sprintf('%.0f', (floatval($t1) + floatval($t2)) * 1000);
}

?>